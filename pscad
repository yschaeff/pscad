#!/usr/bin/env python3

import urwid
from sys import argv

## project specific includes
import importer
from Datastruct import Node
from clipboard import Clippy
from undo import Undo
import validation as val

UNDO_CAP = 1000 ## number of undo levels
SPACE_PER_INDENT = 2
HELP_STRING = "yYxXpPgGzZaA<> *!#%/ dDuUiItTrRsS wqQ"
NEW_LINE_CONTENT = ""
EMPTY_LINE_DISPLAY = "// [EMPTY LINE] //"

SPACE    = 'space'
ARGUMENT = 'args'
COMMENT  = 'comment'
MODIFIER = 'modifier'

palette = [
    #~ ('default', 'white', ''), #bgs
    ## selections
    ('edit', 'white,underline', ''),
    ('edit_select', 'white,underline', 'dark blue'),
    ('edit_suggest', 'brown,bold', 'dark blue'),
    ('error', 'white', 'dark red'),
    ('error_select', 'white', 'dark red'),
    ('select', 'white', 'dark blue'),
    ## misc
    ('status', 'white,standout', 'black'),
    ('bg', 'white', ''),
    ## text
    (COMMENT, 'dark cyan', ''),
    (MODIFIER, 'brown,bold', ''),
    ('var', 'white', ''),
    ('=', 'dark red', ''),
    ('(', 'dark red', ''),
    (')', 'dark red', ''),
    ('<', 'dark red', ''),
    ('>', 'dark red', ''),
    (SPACE, 'default', ''),
    ('stat', 'default', ''),
    (ARGUMENT, 'default', ''),
    ('path', 'default', ''),
    ('name', 'default,bold', ''),
    ('keyword', 'dark blue,bold', ''),
]

exps = {
    val.r_empty     : [],
    val.r_comment   : [COMMENT],
    val.r_assignment: [MODIFIER, 'var', '=', 'stat'],
    val.r_block     : [MODIFIER, 'name', '(', ARGUMENT, ')'],
    val.r_function  : [MODIFIER, 'keyword', 'name', '(', ARGUMENT, ')', '=', 'stat'],
    val.r_module    : [MODIFIER, 'keyword', 'name', '(', ARGUMENT, ')'],
    val.r_include   : [MODIFIER, 'keyword', '<', 'path', '>'],
    val.r_use       : [MODIFIER, 'keyword', '<', 'path', '>']
}
## regression test
for re,l in exps.items(): assert(re.groups == len(l))

# TODO
# context help
# think about open new file/load file etc

class ColorText(urwid.Text):
    def __init__(self, content, valid):
        self.valid = valid
        super().__init__(content)

    def parse(ttype, text):
        if text == "":
            return ""
        elif ttype == SPACE:
            return " "
        elif ttype == MODIFIER:
            return text.translate({ord(' '): None}) + " "
        elif ttype == 'keyword':
            return text + " "
        elif ttype == '=':
            return " = "
        elif ttype == ARGUMENT:
            return text.strip() #stub
        else:
            return text.strip()

    def set_text(self, input_text):
        global exps
        if input_text == "":
            input_text = EMPTY_LINE_DISPLAY
        if self.valid:
            text = input_text
            for r,c in exps.items():
                m = r.match(input_text)
                if not m: continue
                if not c: break
                text = []
                for i,g in enumerate(m.groups()):
                    g = ColorText.parse(c[i], g)
                    if g:
                        text.append((c[i], g))
                break
        else:
            text = [('error', input_text)]
        ## If we had a match but no printable groups text can be empty
        if not text:
            return super().set_text(input_text)
        return super().set_text(text)

    def render(self, size, focus=False):
        if focus:
            if self.valid:
                text = [('select', self.text)]
            else:
                text = [('error_select', self.text)]
            w = urwid.Text(text)
            w.set_layout('left', 'clip')
            return w.render(size, focus)
        return super().render(size, focus)

class HelpEdit(urwid.Edit):
    _sizing = frozenset(['flow'])

    def __init__(self, text, content):
        super().__init__(text, content)
        self.suggest = None

    def rows(self, size, focus=False):
        if not self.suggest:
            return 1
        return 1 + self.suggest.rows(size, focus)

    def keypress(self, size, key):
        ## todo do a
        ## val.complete(self)
        ## so it can set cursor coords
        if key == 'tab':
            val.complete(self, size)
            return None
            
            newtext = val.complete(self.text)
            #~ newtext += val.suggest_args(newtext)
            self.set_edit_text(newtext)
            self.move_cursor_to_coords(size, len(newtext), 0)
            return None
        return super().keypress(size, key)

    def render(self, size, focus=False):
        canvas = super().render(size, focus)
        if not self.suggest:
            return canvas
        canvas2 = self.suggest.render(size)
        return urwid.CanvasCombine([(canvas, True, True), (canvas2, None, False)])

def select(node):
    if not node:
        return None
    elif node.children:
        manager.select = node.children[0]
    else:
        manager.select = node
    return node

class SelectText(urwid.Widget):
    def __init__(self, node, treelist, buf, status_cb):
        super().__init__()
        self.valid = val.is_valid(node.content)
        self.edit = HelpEdit("", node.content)
        self.text = ColorText(node.content, self.valid)
        self.text.set_layout('left', 'clip') # do not wrap
        self.edit.set_layout('left', 'clip')
        key = urwid.connect_signal(self.edit, 'change',
            SelectText.handler, user_args=[self])
        self.showedit = 0
        self.node = node
        self.treelist = treelist
        self.indent = node.depth()
        self.buf = buf
        self.status = status_cb

    def rows(self, size, focus=False):
        if self.showedit:
            return self.edit.rows(size, focus)
        return 1

    def sizing(self):
        if self.showedit:
            return self.edit.sizing()
        return self.text.sizing()

    def selectable(self):
        return True

    def handler(self, widget, newtext):
        ##TODO: on exact match show some usage info
        suggestions = val.suggest(newtext)
        if len(suggestions) == 0:
            self.edit.suggest = None
        else:
            sug = "Suggestions: " + ", ".join(suggestions)
            self.edit.suggest = urwid.Text(('edit_suggest', sug))

        self.text.set_text(newtext)
        ## assign back to node now newtext is cleaned
        self.node.content = newtext

    def reset(self):
        if self.showedit:
            self.showedit = 0
            self._invalidate()

    def get_cursor_coords(self, size):
        if self.showedit:
            return self.edit.get_cursor_coords(size)
        return None

    def keypress(self, size, key):
        if key == 'enter':
            self.showedit ^= 1
            self._invalidate() # mark widget as changed
            ## update so an undo can be saved
            if self.showedit == 0:
                self.treelist.update()
            return None

        if self.showedit:
            return self.edit.keypress(size, key)

        manager.select = None

        ## in Text mode
        if key == 'g':              ## Be siblings parent
            self.node.gobble()
        elif key == 'G':            ## Be childs sibling
            self.node.degobble()
        elif key == 'tab':          ## Be siblings child
            self.node.cling()
        elif key == '>':          ## Be siblings child
            self.node.cling()
        elif key == 'shift tab':    ## Be parents sibling
            self.node.decling()
        elif key == '<':    ## Be parents sibling
            self.node.decling()
        elif key == 'p':            ## Be next sibling
            self.node.merge_after(select(self.buf.load()))
        elif key == 'P':            ## Be previous sibling
            self.node.merge_before(self.buf.load())
        elif key == 'Y':            ## Yank node, transfer children to parent
            self.buf.store(self.node.copy_solo())
            self.status("Yanked 1 node.")
        elif key == 'y':            ## Yank subtree
            n = self.node.subtree()
            self.buf.store(n)
            self.status("Yanked %d nodes."%n.descendants)
        elif key == 'X':            ## Delete node, transfer children to parent
            n = self.node.detach()
            self.buf.store(n)
            self.status("Deleted %d nodes."%n.descendants)
        elif key == 'x':            ## Delete subtree
            n = self.node.split()
            self.buf.store(n)
            self.status("Deleted %d nodes."%n.descendants)
        elif key == '*':
            self.toggle_modifier("*")
        elif key == '!':
            self.toggle_modifier("!")
        elif key == '#':
            self.toggle_modifier("#")
        elif key == '%':
            self.toggle_modifier("%")
        elif key == '/':
            self.toggle_comment()
        elif key == 'D':
            self.node.merge_outer(select(Node("difference()")))
        elif key == 'd':
            self.node.merge_inner(select(Node("difference()")))
        elif key == 'U':
            self.node.merge_outer(select(Node("union()")))
        elif key == 'u':
            self.node.merge_inner(select(Node("union()")))
        elif key == 'I':
            self.node.merge_outer(select(Node("intersection()")))
        elif key == 'i':
            self.node.merge_inner(select(Node("intersection()")))
        elif key == 'T':
            self.node.merge_outer(select(Node("translate([0, 0, 0])")))
        elif key == 't':
            self.node.merge_inner(select(Node("translate([0, 0, 0])")))
        elif key == 'R':
            self.node.merge_outer(select(Node("rotate(0, [0, 0, 0])")))
        elif key == 'r':
            self.node.merge_inner(select(Node("rotate(0, [0, 0, 0])")))
        elif key == 'S':
            self.node.merge_outer(select(Node("scale([0, 0, 0])")))
        elif key == 's':
            self.node.merge_inner(select(Node("scale([0, 0, 0])")))
        elif key == 'A':
            self.node.merge_after(select(Node(NEW_LINE_CONTENT, True)))
        elif key == 'a':
            self.node.merge(0, select(Node(NEW_LINE_CONTENT, True)))
        else:
            return key

        self.treelist.update()
        return None

    def render(self, size, focus=False):
        if self.showedit:
            map2 = urwid.AttrMap(self.edit, 'edit', 'edit_select')
        else:
            map2 = urwid.AttrMap(self.text, 'default', 'select')
        return map2.render(size, focus)

    def toggle_modifier(self, char):
        mods = "*!#%"
        assert(char in mods)
        t = self.node.content
        for i, c in enumerate(t):
            if c not in mods:
                self.node.content = char + t[:i] + " " + t[i:].strip()
                return
            elif c == char:
                 self.node.content = t.replace(char, "", 1).strip()
                 return
        self.node.content = char + self.node.content

    def toggle_comment(self):
        t = self.node.content
        if t.startswith("//"):
            self.node.content = t[2:]
        else:
            self.node.content = "//"+t

class TreeListBox(urwid.ListBox):
    def __init__(self, manager, indent_width):
        self.manager = manager
        body = urwid.SimpleFocusListWalker([])
        self.indent = indent_width;
        self.update_tree = True
        self.buf = Clippy()
        super().__init__(body)

    def update(self):
        self.manager.checkpoint()
        self.update_tree = True
        self._invalidate()

    def render(self, size, focus=False):
        if self.update_tree:
            self.update_tree = False
            tree_text = []
            if len(self.body) > 0:
                pos = self.focus_position
            else:
                pos = 0
            for i, node in enumerate(self.manager.get_tree()):
                t = SelectText(node, self, self.buf, self.manager.status)
                p = urwid.Padding(t, align='left', width='pack', min_width=None, left=node.depth()*self.indent)
                tree_text.append(p)
                if node == self.manager.select:
                    pos = i
            self.body.clear()
            self.body.extend(tree_text)
            if pos < len(self.body):
                self.focus_position = pos
        canvas = super().render(size, focus)
        return canvas

    def keypress(self, size, key):
        key = super().keypress(size, key)
        if not key: return key
        manager.status(".")
        if key == 'esc':
            [n._original_widget.reset() for n in self.body]
            return None
        elif key == 'z':
            if self.manager.undo():
                self.update_tree = True
                self._invalidate()
            return None
        elif key == 'Z':
            if self.manager.redo():
                self.update_tree = True
                self._invalidate()
            return None
        elif key == 'w':
            ## TODO if no outfile display new window ask for path
            ## then set outfile. Else just write.
            ## on W always ask path
            if self.manager.write():
                manager.saved = True
                manager.status("File written")
            else:
                manager.status("Error writing file, no output file set?")
            return None
        elif key == 'q':
            if self.manager.saved:
                raise urwid.ExitMainLoop()
            else:
                manager.status("Unsaved document, use Q to force quit.")
            return None
        return key

def show_or_exit(key):
    if key in ('q', 'Q'):
        raise urwid.ExitMainLoop()

class Manager():
    def __init__(self, infile, outfile, status_text):
        self.undoer = Undo(UNDO_CAP)
        self.saved = True
        self.status_text = status_text
        self.infile = infile
        self.exportfile = outfile
        self.autosave = (outfile != None)
        self.tree = importer.import_scad(infile)
        self.undoer.store(self.tree)
        self.select = None

    def status(self, text):
        self.status_text.set_text(text)

    def write(self):
        return not importer.export_scad(self.infile, self.tree)

    def checkpoint(self, undo=True):
        if undo:
            self.undoer.store(self.tree)
        if self.autosave:
            if not importer.export_scad(self.exportfile, self.tree):
                self.saved = True
            else:
                error("failed to export")
        else:
            self.saved = False

    def undo(self):
        r = self.undoer.undo()
        if r:
            self.tree = r
            self.checkpoint(undo=False)
            return True
        return False

    def redo(self):
        r = self.undoer.redo()
        if r:
            self.tree = r
            self.checkpoint(undo=False)
            return True
        return False

    def get_tree(self):
        return self.tree

def handle_commandline():
    import argparse
    parser = argparse.ArgumentParser(
            description="Python OpenSCAD thingy",
            epilog="Yuri Schaeffer - MIT License")
    parser.add_argument('infile', metavar='IN_FILE',
            help="File to read")
    parser.add_argument('-o', '--outfile', metavar='OUT_FILE',
            default=None,
            help="File to keep up to date")
    return parser.parse_args()

if __name__ == "__main__":
    ##parse cmdline
    args = handle_commandline()

    status = urwid.Text("")
    helptext = urwid.Text(HELP_STRING)
    footer = urwid.Pile([status, helptext])
    footer_pretty = urwid.AttrMap(footer, 'status')

    manager = Manager(args.infile, args.outfile, status)
    tree_list = TreeListBox(manager, SPACE_PER_INDENT)
    body = urwid.AttrMap(tree_list, 'bg')

    frame = urwid.Frame(body, footer=footer_pretty, focus_part='body')

    main = urwid.MainLoop(frame, palette, unhandled_input=show_or_exit)
    while True:
        try:
            main.run()
        except KeyboardInterrupt:
            manager.status("press 'q' to quit or 'Q' to quit without saving.")
            continue
        break
